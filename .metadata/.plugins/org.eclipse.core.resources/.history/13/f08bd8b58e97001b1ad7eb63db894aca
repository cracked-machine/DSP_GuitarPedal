/*
 *  	testfilter_main.cpp
 *
 *  	Created on: Apr 6, 2021
 *		
 * 		MIT License
 *
 * 		Copyright (c) [2021] [Chris Sutton]
 *
 * 		Permission is hereby granted, free of charge, to any person obtaining a copy
 * 		of this software and associated documentation files (the "Software"), to deal
 * 		in the Software without restriction, including without limitation the rights
 * 		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * 		copies of the Software, and to permit persons to whom the Software is
 * 		furnished to do so, subject to the following conditions:
 *
 * 		The above copyright notice and this permission notice shall be included in all
 * 		copies or substantial portions of the Software.
 *
 * 		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * 		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * 		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * 		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * 		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * 		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * 		SOFTWARE.
 */


// STM HAL Framework
#include "stm32g4xx_hal.h"
#include "stm32g4xx_hal_tim.h"
#include "stm32g4xx_hal_tim_ex.h"
#include "stm32g4xx_hal_dac.h"
#include "stm32g4xx_hal_dac_ex.h"
#include "stm32g4xx_hal_gpio.h"
#include "stm32g4xx_hal_gpio_ex.h"

// STM32Cube generated HAL init code
#include "tim.h"
#include "dac.h"
#include "gpio.h"

#include <array>


// CMSIS DSP
#include <arm_math.h>

//#define ENABLE_IIR
//#define ENABLE_FIR
#define ENABLE_PASSTHRU

/*
 * TEST DATA
 */

#define LUT_SIZE 	64

// https://www.daycounter.com/Calculators/Triangle-Wave-Generator-Calculator.phtml
// NumPoints=64, MaxAmpl=4095, NumPerRow=8, Dec
std::array<uint32_t,LUT_SIZE> test_tri_stl {

	128,256,384,512,640,768,896,1024,
	1152,1280,1408,1536,1664,1792,1920,2048,
	2175,2303,2431,2559,2687,2815,2943,3071,
	3199,3327,3455,3583,3711,3839,3967,4095,
	3967,3839,3711,3583,3455,3327,3199,3071,
	2943,2815,2687,2559,2431,2303,2175,2048,
	1920,1792,1664,1536,1408,1280,1152,1024,
	896,768,640,512,384,256,128,0

};

// block size to use in filter spec.
// IIR works better with larger blocks (64 or higher)
// FIR can do smaller blocks (even 1) but this breaks preemption with other peripherals.
#define BLOCK_SIZE	LUT_SIZE / 1

/*
 * FIR FILTER
 */
#define FIR_NUM_TAPS 55

// the FIR filter instance
arm_fir_instance_f32 s_ch1_f32;

// LPF FIR coeffcients for fc=1KHz fs=48 N=55
float32_t lpf_fir_coeffs_1khz_f32[FIR_NUM_TAPS] = {
	-0.000324f, -0.000208f, -0.000072f, 0.000119f, 0.000403f, 0.000822f, 0.001417f, 0.002225f, 0.003281f, 0.004611f, 0.006232f, 0.008153f, 0.010369f, 0.012863f, 0.015606f, 0.018557f, 0.021663f, 0.024861f, 0.028083f, 0.031251f, 0.034287f, 0.037113f, 0.039654f, 0.041838f, 0.043606f, 0.044906f, 0.045702f, 0.045970f, 0.045702f, 0.044906f, 0.043606f, 0.041838f, 0.039654f, 0.037113f, 0.034287f, 0.031251f, 0.028083f, 0.024861f, 0.021663f, 0.018557f, 0.015606f, 0.012863f, 0.010369f, 0.008153f, 0.006232f, 0.004611f, 0.003281f, 0.002225f, 0.001417f, 0.000822f, 0.000403f, 0.000119f, -0.000072f, -0.000208f, -0.000324f
};

// fir state variables
static float32_t firState[BLOCK_SIZE + (FIR_NUM_TAPS - 1)];

/*
 * IIR FILTER
 */

#define IIR_NUM_TAPS 1

// IIR filter instance
arm_biquad_casd_df1_inst_f32 iir_inst_f32;

// https://www.earlevel.com/main/2013/10/13/biquad-calculator-v2/
// LPF IIR coefficients for fc=1KHz fs=44.1KHz Q=0.707 G=6db
const float32_t lpf_iir_coeffs_1khz_f32[] = {	0.00460399444634034,
												0.00920798889268068,
												0.00460399444634034,
												1.7990948352036205,
												-0.8175108129889816 };

static float32_t iirState[BLOCK_SIZE + (IIR_NUM_TAPS - 1)];

size_t lut_count = 0;
size_t sine_lut_index = 0;
size_t lut_index = 0;

std::array<float32_t, BLOCK_SIZE> dsp_input;
std::array<float32_t, BLOCK_SIZE> dsp_output;
std::array<uint32_t, BLOCK_SIZE> dma_output;

#ifdef __cplusplus


	extern "C"
	{

#endif

	uint8_t togglebit = 0;

	void testfilter_main()
	{
		arm_biquad_cascade_df1_init_f32(	&iir_inst_f32,
											IIR_NUM_TAPS,
											lpf_iir_coeffs_1khz_f32,
											iirState);

		arm_fir_init_f32(	&s_ch1_f32,
							FIR_NUM_TAPS,
							(float32_t *)&lpf_fir_coeffs_1khz_f32,
							(float32_t *)&firState,
							BLOCK_SIZE);

		// enable dac and its trigger (tim6)
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dma_output.data(), BLOCK_SIZE, DAC_ALIGN_12B_R);
		TIM6->PSC = 0;
		TIM6->ARR = 255;
		HAL_TIM_Base_Start_IT(&htim6);

		// enable timer for blinky
		TIM7->PSC = 8095;
		TIM7->ARR = 8095;
		HAL_TIM_Base_Start_IT(&htim7);


		while(1)
		{



		}
	}

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
		// Timer callback for DAC trigger
		if(htim->Instance == TIM6)
		{
			// wrap the lut_index
			lut_index = lut_count & ( test_tri_stl.size() - 1 );


			// convert to CMSIS DSP friendly 32bit floating point format
			// Note we only increment within current BLOCK_SIZE
			for(size_t i = 0; i < BLOCK_SIZE; i++)
				dsp_input[i] = (float32_t)test_tri_stl[lut_index + i];

			// filter type (or no filter)
			#ifdef ENABLE_IIR
				arm_biquad_cascade_df1_f32( &iir_inst_f32, dsp_input.data(), dsp_output.data(), BLOCK_SIZE);
			#endif
			#ifdef ENABLE_FIR
				arm_fir_f32(&s_ch1_f32, dsp_input.data(), dsp_output.data(), BLOCK_SIZE);
			#endif
			#ifdef ENABLE_PASSTHRU
				dsp_output = dsp_input;
			#endif

			// convert back to DAC friendly 32bit unsigned int format
			for(size_t i = 0; i < BLOCK_SIZE; i++)
				dma_output[i] = (uint32_t)dsp_output[i];

			// increment the lookup table by entire block
			lut_count = lut_count + BLOCK_SIZE;
		}

		// Timer callback for blinky
		if(htim->Instance == TIM7)
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		}

	}



#ifdef __cplusplus
	}
#endif


