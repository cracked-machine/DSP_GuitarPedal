/*
 * dsp_buffer.hpp
 *
 *  Created on: Apr 2, 2021
 *      Author: chris
 */

#ifndef DSP_BUFFER_HPP_
#define DSP_BUFFER_HPP_


template <class T, size_t size>
class dsp_double_buffer
{

public:
	explicit dsp_double_buffer()
	{
		_rxBuf.fill(0);
		_txBuf.fill(0);
	}

	T* getRxBuf();
	T* getTxBuf();
	uint8_t get24BitSample(uint32_t *left_sample, uint32_t *right_sample, uint8_t pos);
	uint8_t set24BitSample(uint32_t *left_sample, uint32_t *right_sample, uint8_t pos);


private:

	std::array<T, size> _rxBuf;
	std::array<T, size> _txBuf;

};

template <class T, size_t size>
uint8_t dsp_double_buffer<T, size>::get24BitSample(	uint32_t *left_sample,
													uint32_t *right_sample, uint8_t pos)
{
	if(pos + 3 > _rxBuf.size())
	{
		return 1;
	}
	else
	{
		//restore signed 24 bit sample from 16-bit buffers
		left_sample = (uint32_t*) ( _rxBuf[pos + 0] << 16 ) | _rxBuf[pos + 1];
		right_sample = (uint32_t*) ( _rxBuf[pos + 2] << 16 ) | _rxBuf[pos + 3];
		return 0;
	}

}

template <class T, size_t size>
uint8_t dsp_double_buffer<T, size>::set24BitSample(uint32_t *left_sample,
												uint32_t *right_sample, uint8_t pos)
{
	if(pos + 3 > _rxBuf.size())
	{
		return 1;
	}
	else
	{
		//restore to buffer
		_txBuf[pos + 0] = ( (*left_sample) >> 16 ) & 0xFFFF;
		_txBuf[pos + 1] = (*left_sample) & 0xFFFF;
		_txBuf[pos + 2] = ( (*right_sample) >> 16 ) & 0xFFFF;
		_txBuf[pos + 3] = (*right_sample) & 0xFFFF;
		return 0;
	}
}

template <class T, size_t size> T* dsp_double_buffer<T, size>::getRxBuf()
{
	return _rxBuf.data();	// return c array from std::array
}

template <class T, size_t size> T* dsp_double_buffer<T, size>::getTxBuf()
{
	return _txBuf.data();	// return c array from std::array
}

#endif /* DSP_BUFFER_HPP_ */
