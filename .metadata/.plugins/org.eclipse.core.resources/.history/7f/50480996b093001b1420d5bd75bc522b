/*
 * dsp_buffer.hpp
 *
 *  Created on: Apr 2, 2021
 *      Author: chris
 */

#ifndef DSP_BUFFER_HPP_
#define DSP_BUFFER_HPP_


template <class T, size_t size>
class dsp_double_buffer
{

public:
	explicit dsp_double_buffer()
	{
		_rxBuf.fill(0);
		_txBuf.fill(0);
	}

	T* getRxBuf();
	T* getTxBuf();
	void get24BitSample(uint32_t *lsample, uint32_t *rsample, uint8_t pos);
	void set24BitSample(uint32_t *lsample, uint32_t *rsample, uint8_t pos);


private:

	std::array<T, size> _rxBuf;
	std::array<T, size> _txBuf;

};

template <class T, size_t size> void dsp_double_buffer<T, size>::get24BitSample(uint32_t *lsample, uint32_t *rsample, uint8_t pos)
{

}

template <class T, size_t size> T* dsp_double_buffer<T, size>::getRxBuf()
{
	return _rxBuf.data();	// return c array from std::array
}

template <class T, size_t size> T* dsp_double_buffer<T, size>::getTxBuf()
{
	return _txBuf.data();	// return c array from std::array
}

#endif /* DSP_BUFFER_HPP_ */
