/*
 *  	cpputests_buffer_allignment.cpp
 *
 *  	Created on: Apr 2, 2021
 *		
 * 		MIT License
 *
 * 		Copyright (c) [2021] [Chris Sutton]
 *
 * 		Permission is hereby granted, free of charge, to any person obtaining a copy
 * 		of this software and associated documentation files (the "Software"), to deal
 * 		in the Software without restriction, including without limitation the rights
 * 		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * 		copies of the Software, and to permit persons to whom the Software is
 * 		furnished to do so, subject to the following conditions:
 *
 * 		The above copyright notice and this permission notice shall be included in all
 * 		copies or substantial portions of the Software.
 *
 * 		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * 		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * 		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * 		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * 		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * 		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * 		SOFTWARE.
 */


#include <double_buffer.hpp>
#include "CppUTest/TestHarness.h"

//#include "sine_lookup_table.hpp"
std::array<int, 64> test_sine_lut {

	0x80,0x8c,0x98,0xa5,0xb0,0xbc,0xc6,0xd0,
	0xda,0xe2,0xea,0xf0,0xf5,0xfa,0xfd,0xfe,
	0xff,0xfe,0xfd,0xfa,0xf5,0xf0,0xea,0xe2,
	0xda,0xd0,0xc6,0xbc,0xb0,0xa5,0x98,0x8c,
	0x80,0x73,0x67,0x5a,0x4f,0x43,0x39,0x2f,
	0x25,0x1d,0x15,0xf,0xa,0x5,0x2,0x1,
	0x0,0x1,0x2,0x5,0xa,0xf,0x15,0x1d,
	0x25,0x2f,0x39,0x43,0x4f,0x5a,0x67,0x73
};

std::array<int, 64> test_sine_lut_24b_left {

	0x80<<4,0x8c<<4,0x98<<4,0xa5<<4,0xb0<<4,0xbc<<4,0xc6<<4,0xd0<<4,
	0xda<<4,0xe2<<4,0xea<<4,0xf0<<4,0xf5<<4,0xfa<<4,0xfd<<4,0xfe<<4,
	0xff<<4,0xfe<<4,0xfd<<4,0xfa<<4,0xf5<<4,0xf0<<4,0xea<<4,0xe2<<4,
	0xda<<4,0xd0<<4,0xc6<<4,0xbc<<4,0xb0<<4,0xa5<<4,0x98<<4,0x8c<<4,
	0x80<<4,0x73<<4,0x67<<4,0x5a<<4,0x4f<<4,0x43<<4,0x39<<4,0x2f<<4,
	0x25<<4,0x1d<<4,0x15<<4,0xf<<4,0xa<<4,0x5<<4,0x2<<4,0x1<<4,
	0x0<<4,0x1<<4,0x2<<4,0x5<<4,0xa<<4,0xf<<4,0x15<<4,0x1d<<4,
	0x25<<4,0x2f<<4,0x39<<4,0x43<<4,0x4f<<4,0x5a<<4,0x67<<4,0x73
};


TEST_GROUP(DbufferAllignGroup)
{
   void setup()
   {
	  // Init stuff
   }

   void teardown()
   {
	  // Uninit stuff
   }
};

TEST(DbufferAllignGroup, DbufferRx_Allign8BitRight_Frame0)
{
	// Test:
	// Pass right-alligned 8-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_8B_R mode and compare input vs. output.

	// Use default buffer frame0

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;


	while(test_count < (test_sine_lut.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeRxSample( 	&test_sine_lut[test_sine_lut_index],
									&test_sine_lut[test_sine_lut_index],
									DBufAllign::eight_bit_r);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readRxFrame( 	&left_sample,
									&right_sample,
									DBufAllign::eight_bit_r);


		if( test_sine_lut[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut[test_sine_lut_index] != right_sample)
			result = false;



		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferTx_Allign8BitRight_Frame0)
{
	// Test:
	// Pass right-alligned 8-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_8B_R mode and compare input vs. output.

	// Use default buffer frame0

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;


	while(test_count < (test_sine_lut.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeTxSample( 	&test_sine_lut[test_sine_lut_index],
									&test_sine_lut[test_sine_lut_index],
									DBufAllign::eight_bit_r);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readTxSample( 	&left_sample,
									&right_sample,
									DBufAllign::eight_bit_r);


		if( test_sine_lut[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferRx_Allign24BitLeft_Frame0)
{
	// Test:
	// Pass left-alligned 24-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_24B_L mode and compare input vs. output.

	// Use default buffer frame0

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	while(test_count < (test_sine_lut_24b_left.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut_24b_left.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeRxSample( 	&test_sine_lut_24b_left[test_sine_lut_index],
									&test_sine_lut_24b_left[test_sine_lut_index],
									DBufAllign::twentyfour_bit_l);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readRxFrame( 	&left_sample,
									&right_sample,
									DBufAllign::twentyfour_bit_l);


		if( test_sine_lut_24b_left[test_sine_lut_index] != left_sample)
			result = false;


		if( test_sine_lut_24b_left[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferTx_Allign24BitLeft_Frame0)
{
	// Test:
	// Pass left-alligned 24-bit data manually thru the TX buffer
	// in DBUF_ALLIGN_24B_L mode and compare input vs. output.

	// Use default buffer frame0

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;


	while(test_count < (test_sine_lut_24b_left.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut_24b_left.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeTxSample( 	&test_sine_lut_24b_left[test_sine_lut_index],
									&test_sine_lut_24b_left[test_sine_lut_index],
									DBufAllign::twentyfour_bit_l);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readTxSample( 	&left_sample,
									&right_sample,
									DBufAllign::twentyfour_bit_l);


		if( test_sine_lut_24b_left[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut_24b_left[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}


TEST(DbufferAllignGroup, DbufferRx_Allign8BitRight_Frame1)
{
	// Test:
	// Pass right-alligned 8-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_8B_R mode and compare input vs. output.

	// Use non-default buffer frame1

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	// swap to non-default buffer frame1
	test_dbuf.swap_active_frame();

	while(test_count < (test_sine_lut.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeRxSample( 	&test_sine_lut[test_sine_lut_index],
									&test_sine_lut[test_sine_lut_index],
									DBufAllign::eight_bit_r);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readRxFrame( 	&left_sample,
									&right_sample,
									DBufAllign::eight_bit_r);


		if( test_sine_lut[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut[test_sine_lut_index] != right_sample)
			result = false;



		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferTx_Allign8BitRight_Frame1)
{
	// Test:
	// Pass right-alligned 8-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_8B_R mode and compare input vs. output.

	// Use non-default buffer frame1

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	// swap to non-default buffer frame1
	test_dbuf.swap_active_frame();

	while(test_count < (test_sine_lut.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeTxSample( 	&test_sine_lut[test_sine_lut_index],
									&test_sine_lut[test_sine_lut_index],
									DBufAllign::eight_bit_r);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readTxSample( 	&left_sample,
									&right_sample,
									DBufAllign::eight_bit_r);


		if( test_sine_lut[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferRx_Allign24BitLeft_Frame1)
{
	// Test:
	// Pass left-alligned 24-bit data manually thru the rx buffer
	// in DBUF_ALLIGN_24B_L mode and compare input vs. output.

	// Use non-default buffer frame1

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	// swap to non-default buffer frame1
	test_dbuf.swap_active_frame();

	while(test_count < (test_sine_lut_24b_left.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut_24b_left.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeRxSample( 	&test_sine_lut_24b_left[test_sine_lut_index],
									&test_sine_lut_24b_left[test_sine_lut_index],
									DBufAllign::twentyfour_bit_l);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readRxFrame( 	&left_sample,
									&right_sample,
									DBufAllign::twentyfour_bit_l);


		if( test_sine_lut_24b_left[test_sine_lut_index] != left_sample)
			result = false;


		if( test_sine_lut_24b_left[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}

TEST(DbufferAllignGroup, DbufferTx_Allign24BitLeft_Frame1)
{
	// Test:
	// Pass left-alligned 24-bit data manually thru the TX buffer
	// in DBUF_ALLIGN_24B_L mode and compare input vs. output.

	// Use non-default buffer frame1

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	// swap to non-default buffer frame1
	test_dbuf.swap_active_frame();

	while(test_count < (test_sine_lut_24b_left.size()) )
	{
		int left_sample = 0;
		int right_sample = 0;

		// increment the lut array every N-1 ( or sine_lut.size() - 1 )
		test_sine_lut_index = test_count & ( test_sine_lut_24b_left.size() - 1 );

		// send data into Rx buffer #1
		test_dbuf.writeTxSample( 	&test_sine_lut_24b_left[test_sine_lut_index],
									&test_sine_lut_24b_left[test_sine_lut_index],
									DBufAllign::twentyfour_bit_l);

		// retrieve data from dsp Rx buffer #1
		test_dbuf.readTxSample( 	&left_sample,
									&right_sample,
									DBufAllign::twentyfour_bit_l);


		if( test_sine_lut_24b_left[test_sine_lut_index] != left_sample)
			result = false;

		if( test_sine_lut_24b_left[test_sine_lut_index] != right_sample)
			result = false;

		//increment the counter
		test_count++;
	}

	CHECK(result);
}



