/*
 * 		dsp_buffer.hpp
 *
 *  	Created on: Apr 2, 2021
 *      Author: Chris Sutton
 *
 *      MIT License
 *
 * 		Copyright (c) [2021] [Chris Sutton]
 *
 * 		Permission is hereby granted, free of charge, to any person obtaining a copy
 * 		of this software and associated documentation files (the "Software"), to deal
 * 		in the Software without restriction, including without limitation the rights
 * 		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * 		copies of the Software, and to permit persons to whom the Software is
 * 		furnished to do so, subject to the following conditions:
 *
 * 		The above copyright notice and this permission notice shall be included in all
 * 		copies or substantial portions of the Software.
 *
 * 		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * 		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * 		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * 		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * 		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * 		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * 		SOFTWARE.
 */

#ifndef DSP_BUFFER_HPP_
#define DSP_BUFFER_HPP_

#include <assert.h>

template <class T, size_t size>
class dsp_double_buffer
{

public:
	explicit dsp_double_buffer()
	{
		//assert(!size % 4);
		_rxBuf.fill(0);
		_txBuf.fill(0);
	}

	T* getRxBuf();
	T* getTxBuf();

	uint8_t getRx24BitSample(int *left_sample, int *right_sample, size_t pos);
	uint8_t setRx24BitSample(int *left_sample, int *right_sample, size_t pos);
	uint8_t setTx24BitSample(int *left_sample, int *right_sample, size_t pos);

private:

	std::array<T, size> _rxBuf;
	std::array<T, size> _txBuf;

};

/*
 * @brief Pull data from the specified Rx buffer
 *
 * @param	left_sample 	- the output left channel sample
 * 			right_smaple 	- the output right channel sample
 * 			pos				- the buffer offset. Should be zero or (size/2 - 1)
 * 			//TODO use enums to represent two halves of ping pong buffer instead
 *
 * @retval	1 if pos param is pos+ 3 larger than buffer size
 * 			0 if pos param valid
 *
 */


typedef enum
{
	DBAllign8R	4,
	DBAllign24L	16

} DBAllignTypedef;

template <class T, size_t size>
uint8_t dsp_double_buffer<T, size>::getRx24BitSample(	int *left_sample,
														int *right_sample,
														size_t pos)
{
	if(pos + 3 > _rxBuf.size())
	{
		return 1;
	}
	else
	{
		//restore signed 24 bit sample from 16-bit buffers
		//int tmp_left =
		*left_sample = (int) (( _rxBuf[pos + 0] << 4 ) | _rxBuf[pos + 1]);
		*right_sample = (int) (( _rxBuf[pos + 2] << 4 ) | _rxBuf[pos + 3]);
		//right_sample = &tmp_right;
		return 0;
	}

}



/*
 * @brief 	Push data to the specified Tx buffer
 *
 * @param	left_sample 	- the input left channel sample
 * 			right_smaple 	- the input right channel sample
 * 			pos				- the buffer offset. Should be zero or (size/2 - 1)
 * 			//TODO use enums to represent two halves of ping pong buffer instead
 *
 * @retval	1 if pos param is pos+ 3 larger than buffer size
 * 			0 if pos param valid
 */
template <class T, size_t size>
uint8_t dsp_double_buffer<T, size>::setTx24BitSample(int *left_sample,
												int *right_sample, size_t pos)
{
	if(pos + 3 > _txBuf.size())
	{
		return 1;
	}
	else
	{
		//restore to buffer
		_txBuf[pos + 0] = ( (*left_sample) >> 4 ) & 0xFFFF;
		_txBuf[pos + 1] = (*left_sample) & 0xFFFF;
		_txBuf[pos + 2] = ( (*right_sample) >> 4 ) & 0xFFFF;
		_txBuf[pos + 3] = (*right_sample) & 0xFFFF;
		return 0;
	}
}

/*
 * @brief 	Push data to the specified Rx buffer
 *
 * @param	left_sample 	- the input left channel sample
 * 			right_smaple 	- the input right channel sample
 * 			pos				- the buffer offset. Should be zero or (size/2 - 1)
 * 			//TODO use enums to represent two halves of ping pong buffer instead
 *
 * @retval	1 if pos param is pos+ 3 larger than buffer size
 * 			0 if pos param valid
 */
template <class T, size_t size>
uint8_t dsp_double_buffer<T, size>::setRx24BitSample(int *left_sample,
												int *right_sample, size_t pos)
{
	if(pos + 3 > _rxBuf.size())
	{
		return 1;
	}
	else
	{
		//restore to buffer
		_rxBuf[pos + 0] = ( (*left_sample) >> 4 ) & 0xFFFF;
		_rxBuf[pos + 1] = (*left_sample) & 0xFFFF;
		_rxBuf[pos + 2] = ( (*right_sample) >> 4 ) & 0xFFFF;
		_rxBuf[pos + 3] = (*right_sample) & 0xFFFF;
		return 0;
	}
}

/*
 * @brief 	Gets a pointer to the Rx buffer. Used for C API compatibility.
 * 			Pass this to a function expecting uint32_t pointer
 *
 * @param	None
 * @retval	the Rx buffer pointer
 *
 */
template <class T, size_t size> T* dsp_double_buffer<T, size>::getRxBuf()
{
	return _rxBuf.data();	// return c array from std::array
}

/*
 * @brief 	Gets a pointer to the Tx buffer. Used for C API compatibility.
 * 			Pass this to a function expecting uint32_t pointer
 *
 * @param	None
 * @retval	the Tx buffer pointer
 *
 */
template <class T, size_t size> T* dsp_double_buffer<T, size>::getTxBuf()
{
	return _txBuf.data();	// return c array from std::array
}

#endif /* DSP_BUFFER_HPP_ */
