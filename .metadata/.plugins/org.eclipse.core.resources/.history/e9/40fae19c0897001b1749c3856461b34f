/*
 *  	testmain.cpp
 *
 *  	Created on: Apr 6, 2021
 *		
 * 		MIT License
 *
 * 		Copyright (c) [2021] [Chris Sutton]
 *
 * 		Permission is hereby granted, free of charge, to any person obtaining a copy
 * 		of this software and associated documentation files (the "Software"), to deal
 * 		in the Software without restriction, including without limitation the rights
 * 		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * 		copies of the Software, and to permit persons to whom the Software is
 * 		furnished to do so, subject to the following conditions:
 *
 * 		The above copyright notice and this permission notice shall be included in all
 * 		copies or substantial portions of the Software.
 *
 * 		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * 		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * 		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * 		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * 		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * 		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * 		SOFTWARE.
 */


// STM HAL Framework
#include "stm32g4xx_hal.h"
#include "stm32g4xx_hal_tim.h"
#include "stm32g4xx_hal_tim_ex.h"
#include "stm32g4xx_hal_dac.h"
#include "stm32g4xx_hal_dac_ex.h"
#include "stm32g4xx_hal_gpio.h"
#include "stm32g4xx_hal_gpio_ex.h"

// STM32Cube generated HAL init code
#include "tim.h"
#include "dac.h"
#include "gpio.h"

#include <array>

#include <audio_buffer.hpp>

// CMSIS DSP
#include <arm_math.h>

/*
 * IIR FILTER
 */

#define BLOCK_SIZE            1
#define NUM_TAPS              1
arm_biquad_casd_df1_inst_f32 S;
float32_t iir_output[BLOCK_SIZE] = {0};

const float32_t coeffs[] = {	0.07222759259637182,
								0.14445518519274364,
								0.07222759259637182,
								1.1091783806868014,
								0.39808875107228864 };

static float32_t iirState[BLOCK_SIZE + (NUM_TAPS - 1)];

/*
 * TEST DATA
 */
std::array<uint32_t,64> test_sine {

	2048,2248,2447,2642,2831,3013,3185,3346,
	3495,3630,3750,3853,3939,4007,4056,4085,
	4095,4085,4056,4007,3939,3853,3750,3630,
	3495,3346,3185,3013,2831,2642,2447,2248,
	2048,1847,1648,1453,1264,1082,910,749,
	600,465,345,242,156,88,39,10,
	0,10,39,88,156,242,345,465,
	600,749,910,1082,1264,1453,1648,1847
};

// https://www.daycounter.com/Calculators/Triangle-Wave-Generator-Calculator.phtml
// NumPoints=64, MaxAmpl=4095, NumPerRow=8, Dec
std::array<uint32_t, 64> test_tri {

	128,256,384,512,640,768,896,1024,
	1152,1280,1408,1536,1664,1792,1920,2048,
	2175,2303,2431,2559,2687,2815,2943,3071,
	3199,3327,3455,3583,3711,3839,3967,4095,
	3967,3839,3711,3583,3455,3327,3199,3071,
	2943,2815,2687,2559,2431,2303,2175,2048,
	1920,1792,1664,1536,1408,1280,1152,1024,
	896,768,640,512,384,256,128,0

};

uint32_t data_point[1] = {0};

size_t lut_count = 0;
size_t sine_lut_index = 0;
size_t lut_index = 0;

#ifdef __cplusplus


	extern "C"
	{

#endif

	uint8_t togglebit = 0;

	void testmain()
	{
		arm_biquad_cascade_df1_init_f32(&S, NUM_TAPS, coeffs, iirState);

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, data_point, 1, DAC_ALIGN_12B_R);
		HAL_TIM_Base_Start_IT(&htim6);
		//HAL_TIM_Base_Start_IT(&htim7);


		while(1)
		{

			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			//HAL_Delay(1000);

		}
	}

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
			lut_index = lut_count++ & ( test_tri.size() - 1 );
			 = ;
			arm_biquad_cascade_df1_f32( &S, test_tri[lut_index], &data_point[0], BLOCK_SIZE);
	}


#ifdef __cplusplus
	}
#endif


