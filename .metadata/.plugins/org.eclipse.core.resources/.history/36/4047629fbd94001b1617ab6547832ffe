/*
 *  	test_dbuffer_dma_thruput.cpp
 *
 *  	Created on: Apr 3, 2021
 *		
 * 		MIT License
 *
 * 		Copyright (c) [2021] [Chris Sutton]
 *
 * 		Permission is hereby granted, free of charge, to any person obtaining a copy
 * 		of this software and associated documentation files (the "Software"), to deal
 * 		in the Software without restriction, including without limitation the rights
 * 		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * 		copies of the Software, and to permit persons to whom the Software is
 * 		furnished to do so, subject to the following conditions:
 *
 * 		The above copyright notice and this permission notice shall be included in all
 * 		copies or substantial portions of the Software.
 *
 * 		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * 		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * 		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * 		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * 		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * 		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * 		SOFTWARE.
 */

#include <double_buffer.hpp>
#include "CppUTest/TestHarness.h"

TEST_GROUP(DbufferThruputGroup)
{
   void setup()
   {
	  // Init stuff
   }

   void teardown()
   {
	  // Uninit stuff
   }
};

TEST(DbufferThruputGroup, DbufferThruput)
{

	bool result = true;

	size_t test_count = 0;
	size_t test_sine_lut_index = 0;
	const size_t dsp_buf_size = 4;

	double_buffer<uint16_t, dsp_buf_size> test_dbuf;

	while(test_count < (test_sine_lut.size()) )
	{
		// increment the LUT position (circular)
		sine_lut_index = count & ( sine_lut.size() - 1 );


		//std::cout << tmpRx[0] << " " << tmpRx[1] << "(" << (tmpRx[0] | tmpRx[1]) << ")" << std::endl;
		//std::cout << dbufRxDataWord << std::endl;

		std::cout << sine_lut[sine_lut_index] << std::endl;
		std::cout << *dbuf.getRxBuf32_left_chan() << std::endl;

		// direct copy data into auxiliary RxBuf32 pointer
		*dbufRxDataWord = sine_lut[sine_lut_index];

		std::cout << *dbuf.getRxBuf32_left_chan() << std::endl;

		// update the central Rxbuffer from auxiliary RxBuf32 pointer
		dbuf.updateRxFrame( DBufAllign::eight_bit_r );


		// now read the central Rxbuffer values back
		uint32_t ltest = 0;
		uint32_t rtest = 0;
		dbuf.readRxFrame(	&ltest,
							&rtest,
							DBufAllign::eight_bit_r
							);

		std::cout << ltest << std::endl;



		//dbuf.swap_active_frame();

		// send data into Rx buffer frame #0
		dbuf.writeTxFrame( 	&ltest,
							&rtest,
							DBufAllign::eight_bit_r
							);

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

		//increment the counter
		count++;
	}


}

